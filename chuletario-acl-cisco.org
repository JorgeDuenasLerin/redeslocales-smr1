#+TITLE: Listas de control de acceso en routers CISCO
#+AUTHOR: Álvaro González Sotillo
#+EMAIL: alvaro.gonzalezsotillo@educa.madrid.org
#+DATE: \today
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  es
#+OPTIONS:   H:1,2,3 
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME:
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA: \usepackage{attachfile}
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:



* LISTAS DE CONTROL DE ACCESO
  + Las ACL son listas con reglas. 
    - Cada regla define una condición que puede cumplir un paquete
    - Cada regla define una acción (permit, deny) a ejecutar sobre el paquete que cumpla su condición
    - Siempre hay una regla al final que desecha cualquier paquete
  + Se identifican por un número
    - Estándar: 
      - 1 a 99
      - 1300 a 1999
    - Ampliadas: 
      - 100 a 199
      - 2000 a 2699
  + En versiones recientes de IOS (11.2) se pueden usar también nombres de ACL      
  + Una interfaz puede tener una ACL asociada en cada sentido
    - Entrada de paquetes (Inbound)
    - Salida de paquetes (Outbound)

* PROCESAMIENTO DE ACL
  + Al llegar un paquete
    1. Si la interfaz no tiene ACL de entrada, se acepta
    2. Si tiene ACL, se revisan las reglas de la lista
       1. Se comprueban en orden
       2. Si alguna deniega el paquete, se rechaza
       3. Si alguna acepta el paquete, se acepta
       4. Si ninguna se aplica al paquete, se rechaza
  + Antes de enviar un paquete      
    1. Si la interfaz no tiene ACL de salida, se envía
    2. Si tiene ACL, se revisan las reglas de la lista
       1. Se comprueban en orden
       2. Si alguna deniega el paquete, se desecha
       3. Si alguna acepta el paquete, se envía
       4. Si ninguna se aplica al paquete, se desecha

* COMANDOS ÚTILES
** Borrar una ACL

:BEAMER_env: frame
   #+BEGIN_EXAMPLE
   no access-list <numero>
   #+END_EXAMPLE
   
** Mostrar las ACL existentes
   #+BEGIN_EXAMPLE
   show ip access-list
   #+END_EXAMPLE

** ACL asociadas a una interfaz
   #+BEGIN_EXAMPLE
   show ip interface <interfaz>
   #+END_EXAMPLE
   Es necesario mirar el apartado Inbound y Outbound 

** Asociar una ACL a una interfaz
   #+BEGIN_EXAMPLE
   interface <interfaz>
   ip access-group <numero ACL> <out o in>
   #+END_EXAMPLE
** Eliminar una ACL de una interfaz
   #+BEGIN_EXAMPLE
   interface <interfaz>
   no ip access-group <numero ACL> <in o out>
   #+END_EXAMPLE

* ACL ESTANDAR
  #+BEGIN_EXAMPLE
  access-list access-list-number {permit|deny} {host|source source-wildcard|any}.
  #+END_EXAMPLE

  Solo hacen referencia a las direcciones IP de origen. Se puede especificar:
  + Una Red: Se especifica con IP y WILDCARD (no IP y máscara). El WILDCARD es la máscara de red con ceros y unos invertidos.
    - Ejemplo: La red 192.168.1.0/24 se especifica como 192.168.1.0 0.0.0.255
  + Una dirección IP: Las siguientes especificaciones son equivalentes
    - 192.168.1.1
    - 192.168.1.1 0.0.0.0
  + Todas las direcciones: Las siguientes especificaciones son equivalentes
    - any
    - 0.0.0.0 255.255.255.255

** Ejercicio

   Se desea que la red 10.0.0.0/15 no sea enrutada, excepto el equipo 10.0.1.1, que es del administrador.

** Solución propuesta al ejercicio

   1. Se elige un número libre de ACL (en este caso, el 1). 
   2. Se introducen en orden todas las regas de la ACL
   3. Se recomienda hacer explícita la regla final de denegación

   Permitir el host 10.0.1.1
   #+BEGIN_EXAMPLE
   access-list 1 permit host 10.0.1.1
   #+END_EXAMPLE

   Prohibir la red 10.0.0.0/15
   #+BEGIN_EXAMPLE
   access-list 1 deny 10.0.0.0 0.1.255.255
   #+END_EXAMPLE

   Permitir el resto de redes
   #+BEGIN_EXAMPLE
   access-list 1 allow any
   #+END_EXAMPLE

   Explicitar la regla final de denegación (va a estar de todas formas, pero ayuda a no olvidarse de ella)
   #+BEGIN_EXAMPLE
   access-list 1 deny any
   #+END_EXAMPLE

   Asociar esta ACL a la interfaz de entrada de la red 10.0.0.0/15
   #+BEGIN_EXAMPLE
   interface Fa0/0
   ip access-group 1 in
  #+END_EXAMPLE



* ACL AMPLIADAS
  Pueden hacer referencia a otras características del paquete: 
  - Dirección de origen y destino
  - Protocolo ICMP, TCP o UDP
  - Puerto
  - Conexión previamente establecida
  El origen y destino puede especificarse como:
  - =<IP> <WILDCARD>=
  - host <IP>: Equivalente a =<IP> 0.0.0.0=
  - any: Equivalente a =0.0.0.0 255.255.255.255=

** IP
   #+BEGIN_EXAMPLE
   access-list access-list-number [dynamic dynamic-name [timeout minutes]]
   {deny | permit} protocol source source-wildcard destination   destination-wildcard
   [precedence precedence] [tos tos] [log | log-input]  
   [time-range time-range-name][fragments]
   #+END_EXAMPLE
** Protocolo de mensajes de control de Internet (ICMP)
   #+BEGIN_EXAMPLE
   access-list access-list-number [dynamic dynamic-name [timeout minutes]]
   {deny | permit}   icmp source source-wildcard destination destination-wildcard
   [icmp-type   [icmp-code] | [icmp-message]] [precedenceprecedence] [tos tos] 
   [log |   log-input] [time-range time-range-name][fragments]
   #+END_EXAMPLE
** Protocolo de control de transporte (TCP)
   #+BEGIN_EXAMPLE
   access-list access-list-number [dynamic dynamic-name [timeout minutes]]  
   {deny | permit} tcp   source source-wildcard [operator [port]] 
   destination destination-wildcard   [operator [port]] [established] 
   [precedence precedence] [tos tos] [log |   log-input] 
   [time-range time-range-name][fragments]
   #+END_EXAMPLE
** Protocolo de datagrama de usuario (UDP)
   #+BEGIN_EXAMPLE
   access-list access-list-number [dynamic dynamic-name [timeout minutes]]   
   {deny | permit} udp   source source-wildcard [operator [port]] 
   destination destination-wildcard   [operator [port]]
   [precedence precedence] [tos tos] [log | log-input] 
   [time-range time-range-name][fragments]
   #+END_EXAMPLE

** Ejercicio
   Un router une las redes 192.168.1.0/24 (LAN) y 172.16.1.0/24 (DMZ). Se desea que:
   - Los usuarios de la LAN no puedan realizar PING hacia la DMZ.
   - El tráfico UPD está permitido por el puerto 53 (DNS)
   - Las únicas conexiones TCP permitidas entre LAN y DMZ serán las que tengan origen en la LAN.

   [[file:ejercicio-acl-ampliada.png]]

** Solución propuesta
   Esta ACL debe colocarse en la tarjeta de la LAN, sentido inbound.
   #+BEGIN_EXAMPLE
   access-list 100 deny icmp any any
   access-list 100 permit udp any any eq domain
   access-list 100 permit tcp any any
   access-list 100 deny ip any any
   interface Fa0/0
   ip access-group 100 in
   #+END_EXAMPLE

   Esta ACL debe colocarse en la tarjeta de la LAN, sentido outbound
   #+BEGIN_EXAMPLE
   access-list 101 permit udp any eq 53 any
   access-list 101 permit tcp any any established
   access-list 101 deny ip any any
   interface Fa0/0
   ip access-group 101 out
   #+END_EXAMPLE
   

* Práctica evaluable

** Enunciado


   
   #+BEGIN_LATEX
   \textattachfile{ACL-inicial.pkt}{Enlace al fichero PKT}
   #+END_LATEX

   [[file:ACL.png]]
  
   + La LAN puede acceder al servidor de la DMZ y a Internet al servicio WEB.
   + Todo internet puede acceder al servicio WEB de servidor web de la DMZ.
   + El administrador remoto puede acceder a cualquier servicio de la LAN y la DMZ.
   + Todo lo demás está prohibido.

   + Router
     - Internet: fa9/0 8.0.0.1/8   
     - DMZ: fa1/0 100.0.0.14/28  
     - LAN: fa0/0 192.168.1.254/24
   + Servidor Web:
     - DMZ: 100.0.0.1/28
   + Administrador remoto:
     - 8.0.0.200

** Solución    
   Hay Muchas posibles soluciones. En esta se intenta que el Administrador tenga acceso IP completo (ICMP, TCP y UDP)

   - Internet y la LAN pueden acceder al servidor web, se permite al administrador.

     Regla out en Fa1/0
    #+BEGIN_EXAMPLE
    access-list 100 permit tcp any any eq www
    access-list 100 permit ip host 8.0.0.200 any
    access-list 100 deny ip any any
    interface fa1/0
    ip access-group 100 out
    #+END_EXAMPLE

   - La LAN solo puede acceder a los servicios WEB, se permite al administrador.

     Regla in en Fa0/0
    #+BEGIN_EXAMPLE
    access-list 101 permit tcp any any eq www
    access-list 101 permit ip any 8.0.0.200 0.0.0.0 
    access-list 101 deny ip any any
    interface fa0/0
    ip access-group 101 in
    #+END_EXAMPLE

     Regla out en Fa0/0
    #+BEGIN_EXAMPLE
    access-list 102 permit ip host 8.0.0.200 any 
    access-list 102 permit tcp any any established
    access-list 102 deny ip any any
    interface fa0/0
    ip access-group 102 out
    #+END_EXAMPLE




